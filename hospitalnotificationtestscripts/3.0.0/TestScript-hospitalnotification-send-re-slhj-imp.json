{
  "resourceType" : "TestScript",
  "id" : "hospitalnotification-send-re-slhj-imp",
  "meta" : {
    "profile" : ["http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript"]
  },
  "text" : {
    "status" : "generated",
    "div" : "<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative: TestScript</b><a name=\"hospitalnotification-send-re-slhj-imp\"> </a></p><div style=\"display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%\"><p style=\"margin-bottom: 0px\">Resource TestScript &quot;hospitalnotification-send-re-slhj-imp&quot; </p><p style=\"margin-bottom: 0px\">Profile: <code>http://touchstone.aegis.net/touchstone/fhir/testing/StructureDefinition/testscript</code></p></div><p><b>url</b>: <code>http://medcomfhir.dk/ig/hospitalnotificationtestscript/hospitalnotification-send-re-slhj-imp</code></p><p><b>version</b>: 3.0.0</p><p><b>name</b>: HospitalNotificationTestScript</p><p><b>title</b>: Send: Update End hospital stay - patient completed to home/primary sector - RE_SLHJ</p><p><b>status</b>: active</p><p><b>date</b>: 2023-05-01</p><p><b>publisher</b>: MedCom</p><p><b>contact</b>: MedCom: <a href=\"mailto:mailto:fhir@medcom.dk\">mailto:fhir@medcom.dk</a></p><p><b>description</b>: Send: Update End hospital stay - patient completed to home/primary sector</p><p><b>copyright</b>: MedCom 2021</p><h3>Origins</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td>FHIR Client (Details: http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types code FHIR-Client = 'FHIR Client', stated as 'null')</td></tr></table><h3>Destinations</h3><table class=\"grid\"><tr><td>-</td><td><b>Index</b></td><td><b>Profile</b></td></tr><tr><td>*</td><td>1</td><td>FHIR Server (Details: http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types code FHIR-Server = 'FHIR Server', stated as 'null')</td></tr></table><blockquote><p><b>fixture</b></p><blockquote><p><b>id</b></p>create-STIN-01</blockquote><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml\">/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml</a></p></blockquote><blockquote><p><b>fixture</b></p><blockquote><p><b>id</b></p>create-SLHJ-02</blockquote><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml\">/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml</a></p></blockquote><blockquote><p><b>fixture</b></p><blockquote><p><b>id</b></p>create-RE-SLHJ-03</blockquote><p><b>autocreate</b>: false</p><p><b>autodelete</b>: false</p><p><b>resource</b>: <a href=\"/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml\">/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml</a></p></blockquote><p><b>profile</b>: <a href=\"http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message\">http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message</a> &quot;MedComHospitalNotificationMessage&quot;</p><blockquote><p><b>variable</b></p><p><b>name</b>: messageHeaderid-STIN</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: episodeOfCareID-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: searchParamIdentifier-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(MessageHeader).id</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: occurredDateTime-STIN</p><p><b>expression</b>: Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).occurred</p><p><b>sourceId</b>: create-message-STIN</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: messageHeaderid-SLHJ</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: create-message-SLHJ</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: episodeOfCareID-SLHJ</p><p><b>expression</b>: Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value</p><p><b>sourceId</b>: create-message-SLHJ</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: messageHeaderid-RE-SLHJ</p><p><b>expression</b>: Bundle.entry[0].fullUrl</p><p><b>sourceId</b>: create-message-RE-SLHJ</p></blockquote><blockquote><p><b>variable</b></p><p><b>name</b>: episodeOfCareID-RE-SLHJ</p><p><b>expression</b>: Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value</p><p><b>sourceId</b>: create-message-RE-SLHJ</p></blockquote><blockquote><p><b>test</b></p><blockquote><p><b>id</b></p>hospitalnotification-create-STIN-01</blockquote><p><b>name</b>: Create a HospitalNotification STIN Message 01</p><p><b>description</b>: Post HospitalNotification to the server.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>ResponseId</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td>Create (Details: http://terminology.hl7.org/CodeSystem/testscript-operation-codes code create = 'Create', stated as 'null')</td><td>Bundle</td><td>Post a Hospitalnotification</td><td>1</td><td>true</td><td>1</td><td>create-message-STIN</td><td>create-STIN-01</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Operator</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is okay or created.</td><td>response</td><td>in</td><td>200,201</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected eventCoding.code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter class of the request resource is IMP.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).class.code</td><td>equals</td><td>IMP</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter status of the request resource is in-progress.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).status</td><td>equals</td><td>in-progress</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected activity code.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'admit-inpatient').exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the report of admission flag is true.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionExtension').value</td><td>equals</td><td>true</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the target reference in Provenance equals MessageHeader.id</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the episodeOfCare-identifier has the structure of an UUID</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value.matches('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the a receiver of the report of admission exists, when the flag is true, and doesn't exists when the flag is false.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionRecipientExtension').exists() = true</td><td>false</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><blockquote><p><b>id</b></p>hospitalnotification-create-SLHJ-02</blockquote><p><b>name</b>: Create a HospitalNotification SLHJ Message 02</p><p><b>description</b>: Post HospitalNotification to the server.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>ResponseId</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td>Create (Details: http://terminology.hl7.org/CodeSystem/testscript-operation-codes code create = 'Create', stated as 'null')</td><td>Bundle</td><td>Post a Hospitalnotification</td><td>1</td><td>true</td><td>1</td><td>create-message-SLHJ</td><td>create-SLHJ-02</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Operator</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is okay or created.</td><td>response</td><td>in</td><td>200,201</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-STIN}').count() = 1</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected eventCoding.code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the role is set to revision. Not used when testing the first message in a stream</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).entity.role</td><td>equals</td><td>revision</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter class of the request resource is IMP.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).class.code</td><td>equals</td><td>IMP</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter status of the request resource is finished.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).status</td><td>equals</td><td>finished</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected activity code.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'discharge-inpatient-home').exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the target reference in Provenance equals MessageHeader.id</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the 2 Provenance instances exists.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).count()</td><td>equals</td><td>2</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the episodeOfCare-identifier is episodeOfCareID-STIN</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-STIN}').count() = 1</td><td>false</td></tr></table></blockquote></blockquote><blockquote><p><b>test</b></p><blockquote><p><b>id</b></p>hospitalnotification-create-RE-SLHJ-03</blockquote><p><b>name</b>: Create a HospitalNotification RE-SLHJ Message 03</p><p><b>description</b>: Post HospitalNotification to the server.</p><blockquote><p><b>action</b></p><h3>Operations</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Resource</b></td><td><b>Description</b></td><td><b>Destination</b></td><td><b>EncodeRequestUrl</b></td><td><b>Origin</b></td><td><b>ResponseId</b></td><td><b>SourceId</b></td></tr><tr><td>*</td><td>Create (Details: http://terminology.hl7.org/CodeSystem/testscript-operation-codes code create = 'Create', stated as 'null')</td><td>Bundle</td><td>Post a Hospitalnotification</td><td>1</td><td>true</td><td>1</td><td>create-message-RE-SLHJ</td><td>create-RE-SLHJ-03</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Operator</b></td><td><b>ResponseCode</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the returned HTTP status is okay or created.</td><td>response</td><td>in</td><td>200,201</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Resource</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the client request payload contains a Bundle resource type.</td><td>request</td><td>Bundle</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-SLHJ}').count() = 1</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected eventCoding.code.</td><td>request</td><td>Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the role is set to revision. Not used when testing the first message in a stream</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).entity.role</td><td>equals</td><td>revision</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter class of the request resource is IMP.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).class.code</td><td>equals</td><td>IMP</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the Encounter status of the request resource is finished.</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).status</td><td>equals</td><td>finished</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the request resource contains the expected activity code.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'revise-discharge-inpatient-home').exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the target reference in Provenance equals MessageHeader.id</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>Operator</b></td><td><b>Value</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the 3 Provenance instances exists.</td><td>request</td><td>Bundle.entry.resource.ofType(Provenance).count()</td><td>equals</td><td>3</td><td>false</td></tr></table></blockquote><blockquote><p><b>action</b></p><h3>Asserts</h3><table class=\"grid\"><tr><td>-</td><td><b>Description</b></td><td><b>Direction</b></td><td><b>Expression</b></td><td><b>WarningOnly</b></td></tr><tr><td>*</td><td>Confirm that the episodeOfCare-identifier is episodeOfCareID-SLHJ</td><td>request</td><td>Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-SLHJ}').count() = 1</td><td>false</td></tr></table></blockquote></blockquote></div>"
  },
  "url" : "http://medcomfhir.dk/ig/hospitalnotificationtestscript/hospitalnotification-send-re-slhj-imp",
  "version" : "3.0.0",
  "name" : "HospitalNotificationTestScript",
  "title" : "Send: Update End hospital stay - patient completed to home/primary sector - RE_SLHJ",
  "status" : "active",
  "date" : "2023-05-01",
  "publisher" : "MedCom",
  "contact" : [{
    "name" : "MedCom",
    "telecom" : [{
      "system" : "email",
      "value" : "mailto:fhir@medcom.dk"
    }]
  }],
  "description" : "Send: Update End hospital stay - patient completed to home/primary sector",
  "copyright" : "MedCom 2021",
  "origin" : [{
    "index" : 1,
    "profile" : {
      "system" : "http://terminology.hl7.org/CodeSystem/testscript-profile-origin-types",
      "code" : "FHIR-Client"
    }
  }],
  "destination" : [{
    "index" : 1,
    "profile" : {
      "system" : "http://terminology.hl7.org/CodeSystem/testscript-profile-destination-types",
      "code" : "FHIR-Server"
    }
  }],
  "fixture" : [{
    "id" : "create-STIN-01",
    "autocreate" : false,
    "autodelete" : false,
    "resource" : {
      "reference" : "/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml"
    }
  },
  {
    "id" : "create-SLHJ-02",
    "autocreate" : false,
    "autodelete" : false,
    "resource" : {
      "reference" : "/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml"
    }
  },
  {
    "id" : "create-RE-SLHJ-03",
    "autocreate" : false,
    "autodelete" : false,
    "resource" : {
      "reference" : "/FHIRSandbox/MedCom/HospitalNotification/v300/Send/Fixtures/HospitalNotification-fixture.xml"
    }
  }],
  "profile" : [{
    "id" : "hospitalnotification",
    "reference" : "http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-hospitalNotification-message"
  }],
  "variable" : [{
    "name" : "messageHeaderid-STIN",
    "expression" : "Bundle.entry[0].fullUrl",
    "sourceId" : "create-message-STIN"
  },
  {
    "name" : "episodeOfCareID-STIN",
    "expression" : "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value",
    "sourceId" : "create-message-STIN"
  },
  {
    "name" : "searchParamIdentifier-STIN",
    "expression" : "Bundle.entry.resource.ofType(MessageHeader).id",
    "sourceId" : "create-message-STIN"
  },
  {
    "name" : "occurredDateTime-STIN",
    "expression" : "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).occurred",
    "sourceId" : "create-message-STIN"
  },
  {
    "name" : "messageHeaderid-SLHJ",
    "expression" : "Bundle.entry[0].fullUrl",
    "sourceId" : "create-message-SLHJ"
  },
  {
    "name" : "episodeOfCareID-SLHJ",
    "expression" : "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value",
    "sourceId" : "create-message-SLHJ"
  },
  {
    "name" : "messageHeaderid-RE-SLHJ",
    "expression" : "Bundle.entry[0].fullUrl",
    "sourceId" : "create-message-RE-SLHJ"
  },
  {
    "name" : "episodeOfCareID-RE-SLHJ",
    "expression" : "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value",
    "sourceId" : "create-message-RE-SLHJ"
  }],
  "test" : [{
    "id" : "hospitalnotification-create-STIN-01",
    "name" : "Create a HospitalNotification STIN Message 01",
    "description" : "Post HospitalNotification to the server.",
    "action" : [{
      "operation" : {
        "type" : {
          "system" : "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
          "code" : "create"
        },
        "resource" : "Bundle",
        "description" : "Post a Hospitalnotification",
        "destination" : 1,
        "encodeRequestUrl" : true,
        "origin" : 1,
        "responseId" : "create-message-STIN",
        "sourceId" : "create-STIN-01"
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the returned HTTP status is okay or created.",
        "direction" : "response",
        "operator" : "in",
        "responseCode" : "200,201",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the client request payload contains a Bundle resource type.",
        "direction" : "request",
        "resource" : "Bundle",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected eventCoding.code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter class of the request resource is IMP.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).class.code",
        "operator" : "equals",
        "value" : "IMP",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter status of the request resource is in-progress.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).status",
        "operator" : "equals",
        "value" : "in-progress",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected activity code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'admit-inpatient').exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the report of admission flag is true.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionExtension').value",
        "operator" : "equals",
        "value" : "true",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the target reference in Provenance equals MessageHeader.id",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the episodeOfCare-identifier has the structure of an UUID",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).episodeOfCare.identifier.value.matches('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the a receiver of the report of admission exists, when the flag is true, and doesn't exists when the flag is false.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(MessageHeader).extension.where(url='http://medcomfhir.dk/ig/hospitalnotification/StructureDefinition/medcom-messaging-reportOfAdmissionRecipientExtension').exists() = true",
        "warningOnly" : false
      }
    }]
  },
  {
    "id" : "hospitalnotification-create-SLHJ-02",
    "name" : "Create a HospitalNotification SLHJ Message 02",
    "description" : "Post HospitalNotification to the server.",
    "action" : [{
      "operation" : {
        "type" : {
          "system" : "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
          "code" : "create"
        },
        "resource" : "Bundle",
        "description" : "Post a Hospitalnotification",
        "destination" : 1,
        "encodeRequestUrl" : true,
        "origin" : 1,
        "responseId" : "create-message-SLHJ",
        "sourceId" : "create-SLHJ-02"
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the returned HTTP status is okay or created.",
        "direction" : "response",
        "operator" : "in",
        "responseCode" : "200,201",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the client request payload contains a Bundle resource type.",
        "direction" : "request",
        "resource" : "Bundle",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-STIN}').count() = 1",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected eventCoding.code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the role is set to revision. Not used when testing the first message in a stream",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).entity.role",
        "operator" : "equals",
        "value" : "revision",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter class of the request resource is IMP.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).class.code",
        "operator" : "equals",
        "value" : "IMP",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter status of the request resource is finished.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).status",
        "operator" : "equals",
        "value" : "finished",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected activity code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'discharge-inpatient-home').exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the target reference in Provenance equals MessageHeader.id",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the 2 Provenance instances exists.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).count()",
        "operator" : "equals",
        "value" : "2",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the episodeOfCare-identifier is episodeOfCareID-STIN",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-STIN}').count() = 1",
        "warningOnly" : false
      }
    }]
  },
  {
    "id" : "hospitalnotification-create-RE-SLHJ-03",
    "name" : "Create a HospitalNotification RE-SLHJ Message 03",
    "description" : "Post HospitalNotification to the server.",
    "action" : [{
      "operation" : {
        "type" : {
          "system" : "http://terminology.hl7.org/CodeSystem/testscript-operation-codes",
          "code" : "create"
        },
        "resource" : "Bundle",
        "description" : "Post a Hospitalnotification",
        "destination" : 1,
        "encodeRequestUrl" : true,
        "origin" : 1,
        "responseId" : "create-message-RE-SLHJ",
        "sourceId" : "create-RE-SLHJ-03"
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the returned HTTP status is okay or created.",
        "direction" : "response",
        "operator" : "in",
        "responseCode" : "200,201",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the client request payload contains a Bundle resource type.",
        "direction" : "request",
        "resource" : "Bundle",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the previous MessageHeader fullURL is identical to Provenance.entity.what",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(entity.what.reference = '${messageHeaderid-SLHJ}').count() = 1",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected eventCoding.code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(MessageHeader).event.as(Coding).select(code = 'hospital-notification-message').allTrue()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the role is set to revision. Not used when testing the first message in a stream",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).entity.role",
        "operator" : "equals",
        "value" : "revision",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter class of the request resource is IMP.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).class.code",
        "operator" : "equals",
        "value" : "IMP",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the Encounter status of the request resource is finished.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).status",
        "operator" : "equals",
        "value" : "finished",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the request resource contains the expected activity code.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(activity.coding.code = 'revise-discharge-inpatient-home').exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the target reference in Provenance equals MessageHeader.id",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).where(target.reference = %resource.entry[0].fullUrl).exists()",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the 3 Provenance instances exists.",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Provenance).count()",
        "operator" : "equals",
        "value" : "3",
        "warningOnly" : false
      }
    },
    {
      "assert" : {
        "description" : "Confirm that the episodeOfCare-identifier is episodeOfCareID-SLHJ",
        "direction" : "request",
        "expression" : "Bundle.entry.resource.ofType(Encounter).where(episodeOfCare.identifier.value = '${episodeOfCareID-SLHJ}').count() = 1",
        "warningOnly" : false
      }
    }]
  }]
}